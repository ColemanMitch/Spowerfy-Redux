{"version":3,"sources":["services/spotify.service.ts","Timer.tsx","components/Login.tsx","config/constants.ts","components/Playlists.tsx","components/SelectMusicPage.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["BASE_URL","SpotifyService","_accessToken","parsed","URLSearchParams","window","location","search","this","get","console","error","fetch","headers","deviceID","method","body","JSON","stringify","playlistURI","Timer","props","initialTimer","createTimeObj","state","time","songCount","ticking","tick","a","newTime","seconds","minutes","skipToNextSong","setState","interval","startTimer","bind","Array","keys","num","setTimeout","Math","floor","className","style","float","React","Component","Login","id","onClick","assign","href","includes","Playlists","setActivePlaylist","e","target","setPlaylist","playlists","filter","pl","uri","value","filterPlaylist","playlistFilter","s1","s2","toLowerCase","placeholder","onChange","length","checkIncludes","name","map","src","images","url","alt","type","checked","activePlaylist","SelectMusicPage","startPlayback","user","devices","options","device","label","handleDevice","App","spotifyService","playbackDeviceId","playlist","authenticated","filterString","filteredPlaylists","partyStarted","songLoaded","fetchCurrentlyPlaying","changeInterval","fetchMe","then","data","json","display_name","fetchDevices","fetchPlaylists","items","useDevice","res","status","startPlaylist","shuffle","alert","item","activeSong","skipSong","getReader","read","done","newVal","forceNumber","album","fontWeight","artists","min","max","step","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.624471a3.chunk.js","sourcesContent":["\nconst BASE_URL = 'https://api.spotify.com/v1';\n\nexport class SpotifyService {\n  private _accessToken: string | null = null;\n\n  constructor() {\n    const parsed = new URLSearchParams(window.location.search);\n    this._accessToken = parsed.get(\"access_token\");\n    \n    if (!this._accessToken) {\n      console.error('No access_token query param found');\n    }\n  }\n\n  getAccessToken(): string | null {\n    return this._accessToken;\n  }\n\n  fetchMe() {\n    return fetch(`${BASE_URL}/me`, {\n      headers: {'Authorization': 'Bearer ' + this._accessToken}\n    });\n  }\n\n  fetchDevices() {\n    return fetch(`${BASE_URL}/me/player/devices`, {\n      headers: {'Authorization': 'Bearer ' + this._accessToken}\n    });\n  }\n\n  fetchPlaylists() {\n    return fetch(`${BASE_URL}/me/playlists?limit=50`, {\n      headers: {'Authorization': 'Bearer ' + this._accessToken}\n    });\n  }\n\n  useDevice(deviceID: string) {\n    return fetch(`${BASE_URL}/me/player`, {\n      method: 'PUT',\n      headers: {'Authorization': 'Bearer ' + this._accessToken},\n      body: JSON.stringify({ \"device_ids\": [deviceID], \"play\": true})\n    });\n  }\n\n  shuffle() {\n    return fetch(`${BASE_URL}/me/player/shuffle?state=true`,\n    {\n      method: 'PUT',\n      headers: {'Authorization': 'Bearer ' + this._accessToken},\n    });\n  }\n\n  skipSong() {\n    return fetch('https://api.spotify.com/v1/me/player/next',\n    {\n      method: 'POST',\n      headers: {'Authorization': 'Bearer ' + this._accessToken},\n    });\n  }\n\n  fetchCurrentlyPlaying() {\n    return fetch(`https://api.spotify.com/v1/me/player/currently-playing`, \n    {\n      method: 'GET',\n      headers: {'Authorization': 'Bearer ' + this._accessToken},\n    });\n  }\n\n  startPlaylist(playlistURI: string) {\n    return fetch(`https://api.spotify.com/v1/me/player/play`, \n    {\n      method: 'PUT',\n      headers: {'Authorization': 'Bearer ' + this._accessToken},\n      body: JSON.stringify({\"context_uri\": playlistURI})\n    });\n  }\n}\n","import React from 'react';\nimport { TimerCount, TimerProps, TimerState } from './models/models';\n\nconst START_TIME = 10;\n\nclass Timer extends React.Component<TimerProps, TimerState> {\n\n  initialTimer: TimerCount = {\n    ...this.createTimeObj(START_TIME)\n  }\n\n  state = { time: { ...this.initialTimer }, songCount: 1, ticking: false };\n\n  constructor(props: TimerProps) {\n    super(props);\n    this.startTimer = this.startTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      ticking: true\n    });\n    this.startTimer();\n  }\n\n  componentDidUpdate() {\n    if(!this.state.ticking) {\n      this.startTimer();\n      this.setState({\n        ticking: true\n      });\n    }\n  }\n\n  async startTimer() {\n    // Loop through a list of [0,1,2,3...START_TIME-1]\n    for (const num of Array(this.props.interval+1).keys()) { // new interval will take effect AFTER current interval has run out\n      // Set a tick to occur every 1.000 * n seconds\n      await setTimeout(this.tick, 1000*(num+1));\n    }\n  }\n\n  createTimeObj(seconds: number): TimerCount {\n    return { minutes: Math.floor(seconds/60), seconds: seconds % 60 };\n  }\n\n  tick = async () => {\n    const newTime = { ...this.state.time };\n    if(this.state.time.seconds === 0) {\n      if(this.state.time.minutes === 0) {\n        this.props.skipToNextSong();\n        this.setState({\n          time: this.createTimeObj(this.props.interval),//(START_TIME),\n          songCount: this.state.songCount + 1,\n          ticking: false\n        });\n        return;\n      }\n      newTime.minutes -= 1;\n      newTime.seconds = 60;\n    }\n    newTime.seconds -= 1;\n    this.setState({\n      time: newTime\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        <div className=\"drink-counter\" style={{float:\"left\"}}>\n          <h4>Currently on</h4>\n          <h1>Drink #{this.state.songCount}</h1> \n        </div>\n        <div className=\"time-counter\" style={{float:\"right\"}}>\n          <h4 >Time Remaining:</h4> \n          <h1 >{this.state.time.minutes}m {this.state.time.seconds}s</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;","import { LOGIN_URL, LOGIN_URL_LOCAL } from \"../config/constants\";\n\nconst Login = () => {\n  return <div className=\"login-app-body\">\n    <header className=\"nonfixed-header\">\n      <h1 className=\"app-title-nonfixed\">Spowerfy 🍺</h1>\n    </header>\n    <button id=\"sign-in-button\" className=\"center\" onClick={() => {\n        window.location.assign(window.location.href.includes('localhost') \n        ? LOGIN_URL_LOCAL \n        : LOGIN_URL) \n      }\n    }\n    style={{'fontSize': '20px'}}>Sign in with Spotify</button>\n  </div>;\n}\n\nexport default Login;\n","export const LOGIN_URL_LOCAL = 'http://localhost:8888/login';\nexport const LOGIN_URL = 'https://spowerfy-backend.herokuapp.com/login';\n","import { Component, SyntheticEvent } from \"react\";\nimport { PlaylistsProps, PlaylistsState } from \"../models/models\";\n\n\nclass Playlists extends Component<PlaylistsProps, PlaylistsState> {\n\n  constructor(props: PlaylistsProps) {\n    super(props);\n    this.state = {\n      playlistFilter: ''\n    }\n  }\n\n  setActivePlaylist = (e: SyntheticEvent): void => {\n    // TODO: Refactor to use e.target.addEventListener instead of needing to cast to HTMLInputElement\n    const target = e.target as HTMLInputElement;\n    this.props.setPlaylist(this.props.playlists.filter(pl => pl.uri === target.value)[0]);\n  }\n\n  filterPlaylist = (e: SyntheticEvent): void => {\n    // TODO: Refactor to use e.target.addEventListener instead of needing to cast to HTMLInputElement\n    const target = e.target as HTMLInputElement;\n    this.setState({playlistFilter: target.value})\n  }\n\n  private checkIncludes(s1: string, s2: string) {\n    return s1.toLowerCase().includes(s2.toLowerCase());\n  }\n\n  render () {\n    return <div>\n      <input id=\"playlist-filter\" placeholder=\"Start typing to filter for your playlist\" onChange={ this.filterPlaylist } value={ this.state.playlistFilter }/>\n      { this.props.playlists.length > 0 ?\n        <div>\n          <div className=\"playlist-container\">\n            <ul>\n              <form id=\"playlist-select\">\n              { this.props.playlists.filter((playlists) => this.checkIncludes(playlists.name.toLowerCase(), this.state.playlistFilter.toLowerCase())).map((pl) => (\n                <div className=\"playlist-div\" key={pl.uri}>\n                  <img className=\"playlist-images\" src={pl.images[0]?.url} alt=\"Playlist art\"></img>\n                  <li className=\"playlist-item\">\n                    <h3 className=\"playlist-name\">{pl.name}</h3>\n                    <input \n                      type=\"radio\"\n                      checked={ pl.name === this.props.activePlaylist?.name } \n                      value={pl.uri} \n                      name=\"playlists\"\n                      onChange={() => ({})} /* TODO: get this outta here */\n                      onClick={ this.setActivePlaylist }\n                      className=\"playlist-radio\"\n                    />\n                  </li>\n                </div>\n              ))}\n              </form>\n            </ul>\n          </div>\n        </div>\n      : \n        <p>Loading playlists...</p>\n      }\n    </div>\n  }\n}\n\nexport default Playlists;\n","import Select from \"react-select\";\nimport { SelectMusicProps } from \"../models/models\";\nimport Playlists from \"./Playlists\";\n\n\nconst SelectMusicPage = (props: SelectMusicProps) => {\n  return <div>\n    <header className=\"fixed-header\">\n      <h1 className=\"app-title\">Spowerfy 🍺</h1>  \n      <button className=\"start-button\" style={{float:\"right\"}} onClick={props.startPlayback}>Click to start your power hour</button>\n    </header>\n    <div className=\"app-body\">\n      <h2>Hello {props.user?.name},</h2>\n      <br></br>\n        { props.devices ?\n        <ul id=\"device-dropdown\">\n          <h3>Select your playback device</h3>\n          <Select className=\"playback-device-select\"\n            options={props.devices.map(device => ({ label: device.name, value: device.id }))}\n            onChange={props.handleDevice} \n          />\n        </ul>\n        :\n        <p>Loading devices...</p>\n        }\n      <Playlists playlists={props.playlists} activePlaylist={props.activePlaylist} setPlaylist={props.setPlaylist}/>\n    </div>\n  </div>\n}\n\n\nexport default SelectMusicPage;\n","import './styles/main.css';\nimport { Component } from 'react';\nimport { AppState, Playlist } from './models/models';\nimport { MeResponse, DevicesResponse, PlaylistsResponse, CurrentlyPlayingReponse } from './models/responses';\nimport { SpotifyService } from './services/spotify.service';\nimport Timer from './Timer';\nimport Login from './components/Login';\nimport SelectMusicPage from './components/SelectMusicPage';\nimport {RangeStepInput} from 'react-range-step-input';\nimport forceNumber from 'force-number';\n\n\n\nclass App extends Component<void, AppState> {\n  private spotifyService: SpotifyService;\n\n  state: AppState;\n\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      authenticated: false,\n      filterString: '',\n      playbackDeviceId: '',\n      playlists: [],\n      filteredPlaylists: [],\n      partyStarted: false,\n      devices: [],\n      songLoaded: false,\n      interval: 10,\n    }\n    this.spotifyService = new SpotifyService();\n    \n    this.startPlayback = this.startPlayback.bind(this);\n    this.fetchCurrentlyPlaying = this.fetchCurrentlyPlaying.bind(this);\n    this.skipToNextSong = this.skipToNextSong.bind(this);\n    this.changeInterval = this.changeInterval.bind(this);\n  }\n\n  componentDidMount(): void {      \n    this.spotifyService.fetchMe().then(data => {\n      data.json().then((json: MeResponse) => {\n        if(json.display_name) {\n          this.setState({\n            user: { name: json.display_name }\n          });\n        }\n      });\n    });\n\n    this.spotifyService.fetchDevices().then(data => {\n      data.json().then((json: DevicesResponse) => {\n        if(json.devices) {\n          this.setState({\n            devices: json.devices\n          });\n        }\n      })\n    });\n\n    this.spotifyService.fetchPlaylists().then(data => {\n      data.json().then((json: PlaylistsResponse) => {\n        if(json.items) {\n          this.setState({\n            playlists: json.items,\n            filteredPlaylists: json.items\n          });\n        }\n      });\n    });\n  }\n\n  handleDevice = (e): void => {\n    // Trying to type this parameter is absolutely ridiculous, leaving as any\n    this.setState({playbackDeviceId: e.value});\n  }\n\n  setPlaylist = (playlist: Playlist): void => {\n    this.setState({activePlaylist: playlist});\n  }\n\n  startPlayback(): void {\n    if (!this.state.playbackDeviceId || !this.state.activePlaylist) {\n      alert('Select both a device and a playlist to get this party started!');\n    } else {\n      this.spotifyService.useDevice(this.state.playbackDeviceId).then(res => {\n        if (res.status === 204) {\n          setTimeout(() => this.spotifyService.startPlaylist(this.state.activePlaylist?.uri ?? '').then(() => {\n            // TODO: Fix using timeout here\n            this.spotifyService.shuffle().then(() => {\n              this.setState({\n                partyStarted: true\n              });\n              setTimeout(() => this.fetchCurrentlyPlaying(), 1000);\n              // Sometimes currently playing fro spotify doesnt update for a bit\n              setTimeout(() => this.fetchCurrentlyPlaying(), 2500);\n            });\n          }), 1000);\n        }\n      });\n    }\n  }\n\n\n  fetchCurrentlyPlaying() {\n    this.spotifyService.fetchCurrentlyPlaying().then(data => {\n      data.json().then((json: CurrentlyPlayingReponse) => {\n        if(json.item) {\n          this.setState({\n            activeSong: json.item\n          });\n        }\n      });\n    });\n  }\n\n  skipToNextSong(): void {\n    // Wait for skip song call to finish, then read the body\n    this.spotifyService.skipSong().then(res => {\n      res.body?.getReader().read().then(body => {\n        if(body?.done) {\n          // Refresh currently playing since we know new song is now playing\n          setTimeout(() => this.fetchCurrentlyPlaying(), 1000);\n        }\n      });\n    });\n  }\n\n  changeInterval(e) {\n    const newVal = forceNumber(e.target.value);\n    this.setState({interval: newVal});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        { this.state.partyStarted ?\n          <div className=\"party-time app-body\">\n            <header className=\"nonfixed-header\">\n            <h1 className=\"app-title-nonfixed\">Spowerfy 🍺</h1>\n            </header>\n            <h2>Currently Playing: </h2>\n            <Timer skipToNextSong={this.skipToNextSong} interval={this.state.interval}></Timer>\n              { this.state.activeSong ?\n                <div>\n                  <img src={this.state.activeSong.album.images[0].url} alt='album art of the current track'></img>\n                  <h3 style={{fontWeight: 'bold'}}>{this.state.activeSong.name}</h3>\n                  <h4 className=\"artist-name\">{this.state.activeSong.album.artists[0].name}</h4> \n                  <div>\n                    <p>Change the interval between songs?</p> \n                    <RangeStepInput\n                    min={5} max={120} onChange={this.changeInterval}\n                    value={this.state.interval} step={5}/>\n                    {this.state.interval} seconds \n                </div>\n                </div>\n              :\n                <p>Loading playback..</p>\n              }\n          </div>\n        :\n          <div>\n            { this.state.user ?\n              <SelectMusicPage \n                devices={this.state.devices} \n                playlists={this.state.playlists}\n                user={this.state.user}\n                activePlaylist={this.state.activePlaylist}\n                setPlaylist={this.setPlaylist} \n                handleDevice={this.handleDevice}\n                startPlayback={this.startPlayback}\n              />\n            : \n              <Login />\n            }\n          </div>\n        }\n        <footer>\n          <p>Made by <a href=\"https://www.github.com/ColemanMitch\" >Cole Mitchell</a> & <a href=\"https://github.com/dwilliams27\" >David Williams</a></p>\n        </footer>\n    </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}